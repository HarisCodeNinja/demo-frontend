import { Pager, QueryPager } from '@/interface/common';

/**
 * Primary keys for identifying an employee record
 */
export interface IEmployeePrimaryKeys {
	employeeId: string;
}

/**
 * Base employee interface with core fields
 */
export interface IEmployee {
	employeeId: string;
	userId: string;
	firstName: string;
	lastName: string;
	dateOfBirth?: Date;
	gender?: string;
	phoneNumber?: string;
	address?: string;
	personalEmail?: string;
	employmentStartDate: Date;
	employmentEndDate?: Date;
	departmentId: string;
	designationId: string;
	reportingManagerId?: string;
	status: string;
}

/**
 * Employee data for creating a new employee
 * Omits employeeId as it's generated by the backend
 */
export type IEmployeeAdd = Omit<IEmployee, 'employeeId'>;

/**
 * Employee data for editing an existing employee
 * All fields are optional except the employeeId
 */
export type IEmployeeEdit = Partial<IEmployee> & IEmployeePrimaryKeys;

/**
 * Employee data for table/list view with additional fields
 */
export interface IEmployeeIndex extends IEmployee {
	employeeUniqueId: string;
	createdAt: Date;
	updatedAt: Date;
	employeeLabel: string;
}

/**
 * Paginated employee response
 */
export interface IEmployeePager {
	data: IEmployeeIndex[];
	meta: Pager;
}

/**
 * Query parameters for fetching employees
 */
export type IEmployeeQueryParams = QueryPager;

/**
 * Single employee detail view with all fields
 */
export interface IEmployeeSingle extends IEmployee {
	employeeUniqueId: string;
	createdAt: Date;
	updatedAt: Date;
}

